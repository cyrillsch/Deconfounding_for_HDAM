}
# dependence on n
par(mfrow=c(2,3))
for(j in 1:6){
# dependence on n
par(mfrow=c(2,3))
for(j in 1:6){
plot(log(n.vec), log(mMSE.trim[,j]))
}
# dependence on n
par(mfrow=c(2,3))
for(j in 1:6){
plot(log(n.vec), log(mMSE.trim[,j]))
}
}
# dependence on n
par(mfrow=c(2,3))
for(j in 1:6){
plot(log(n.vec), log(mMSE.trim[,j]))
}
# dependence on n
par(mfrow=c(2,3))
# dependence on n
par(mfrow=c(2,3))
for(j in 1:6){
plot(n.vec, mMSE.trim[, j])
}
# dependence on p
par(mfrow=c(2,3))
for(i in 1:6){
plot(p.vec, mMSE.trim[i,])
}
mMSE.trim
# generate "long" dataframe to make linear regression.
MSE.long <- numeric(length(n.vec)*length(p.vec))
# generate "long" dataframe to make linear regression.
MSE.long <- numeric(length(n.vec)*length(p.vec))
n.long <- numeric(length(n.vec)*length(p.vec))
p.long <- numeric(length(n.vec)*length(p.vec))
for(j in 1:length(p.vec)){
MSE.long[(j-1)*length(n.vec):j*length(n.vec)] <- mMSE.trim[,j]
}
for(j in 1:length(p.vec)){
MSE.long[((j-1)*length(n.vec)+1):j*length(n.vec)] <- mMSE.trim[,j]
}
for(j in 1:length(p.vec)){
MSE.long[((j-1)*length(n.vec)+1):(j*length(n.vec))] <- mMSE.trim[,j]
}
mMSE.trim
MSE.long
# generate "long" dataframe to make linear regression.
MSE.long <- numeric(length(n.vec)*length(p.vec))
n.long <- numeric(length(n.vec)*length(p.vec))
p.long <- numeric(length(n.vec)*length(p.vec))
for(j in 1:length(p.vec)){
MSE.long[((j-1)*length(n.vec)+1):(j*length(n.vec))] <- mMSE.trim[,j]
}
MSE.long
n.long <- rep(n.vec, each = length(p.vec))
n.long <- rep(n.vec, length(p.vec))
n.long
p.long <- rep(p.vec, each = length(n.vec))
p.long
dat <- data.frame(MSE=MSE.long, n = n.long, p= p.long)
View(dat)
mMSE.trim
plot(dat$n, dat$MSE)
par(mfrow=c(1,1))
plot(dat$n, dat$MSE)
plot(log(dat$n), log(dat$MSE))
fit <- lm(log(MSE)~log(n), data = dat)
summary(fit)
fit <- lm(log(MSE)~log(n)+log(p)+log(n):log(p), data = dat)
summary(fit)
fit <- lm(log(MSE)~log(n), data = dat)
summary(fit)
abline(fit)
fit <- lm(log(MSE)~log(n), data = dat)
summary(fit)
abline(fit)
plot(fit)
mMSE.trim
MSE.long
dat
fit1 <- lm(log(MSE)~log(n)+log(p))
fit1 <- lm(log(MSE)~log(n)+log(p), data = dat)
summary(fit1)
fit1 <- lm(log(MSE)~log(n)+log(p)+log(n):log(p), data = dat)
summary(fit1)
fit1 <- lm(MSE~n+p, data = dat)
summary(fit1)
fit1 <- lm(log(MSE)~log(n), data = dat)
summary(fit1)
fit <- lm(log(MSE)~log(n), data = dat)
summary(fit)
abline(fit)
par(mfrow=c(1,1))
plot(dat$n, dat$MSE)
plot(log(dat$n), log(dat$MSE))
fit <- lm(log(MSE)~log(n), data = dat)
summary(fit)
abline(fit)
fit <- lm(log(MSE)~log(n)+as.factor(dat$p), data = dat)
summary(fit)
fit <- lm(log(MSE)~log(n)+as.factor(dat$p) + log(n):as.factor(dat$p), data = dat)
summary(fit)
fit <- lm(log(MSE)~log(n), data = dat)
summary(fit)
abline(fit)
# consider the setting n = 300, p = 800 from the VarP.R simulation
load("VarP_2023_10_12.RData")
resTrim.NULL <- data.frame(matrix(ncol = 4, nrow = nrep * length(p.vec)))
colnames(resTrim.NULL) <- c("p", "MSE", "s.active", "meth")
resTrim.NULL <- data.frame(matrix(ncol = 4, nrow = nrep * length(p.vec)))
nrep <- 100
nrep <- 100
resTrim.NULL <- data.frame(matrix(ncol = 4, nrow = nrep * length(p.vec)))
p.vec <- c(50, 100, 200, 400, 800)
resTrim.NULL <- data.frame(matrix(ncol = 4, nrow = nrep * length(p.vec)))
colnames(resTrim.NULL) <- c("p", "MSE", "s.active", "meth")
for(j in 1: length(p.vec)){
for(i in 1:nrep){
resTrim.NULL$meth[(j-1)*nrep + i] <- "trim"
resTrim.NULL$p[(j-1)*nrep + i] <- p.vec[j]
resTrim.NULL$MSE[(j-1)*nrep + i] <- l.VarP.trim.NULL[[j]][[i]][1]
resTrim.NULL$s.active[(j-1)*nrep + i] <- l.VarP.trim.NULL[[j]][[i]][2]
}
}
resNone.NULL <- data.frame(matrix(ncol = 4, nrow = nrep * length(p.vec)))
colnames(resNone.NULL) <- c("p", "MSE", "s.active", "meth")
for(j in 1: length(p.vec)){
for(i in 1:nrep){
resNone.NULL$meth[(j-1)*nrep + i] <- "none"
resNone.NULL$p[(j-1)*nrep + i] <- p.vec[j]
resNone.NULL$MSE[(j-1)*nrep + i] <- l.VarP.none.NULL[[j]][[i]][1]
resNone.NULL$s.active[(j-1)*nrep + i] <- l.VarP.none.NULL[[j]][[i]][2]
}
}
resTrim.NULL$p <- factor(resTrim.NULL$p, levels = p.vec)
resTrim.NULL$meth <- as.factor(resTrim.NULL$meth)
resNone.NULL$p <- factor(resNone.NULL$p, levels = p.vec)
resNone.NULL$meth <- as.factor(resNone.NULL$meth)
resTot.NULL <- rbind(resTrim.NULL, resNone.NULL)
res.trim.p800 <- res.Trim.NULL[which(resTrim.Null$p == "800"),]
resTrim.p800 <- resTrim.NULL[which(resTrim.Null$p == "800"),]
resTrim.p800 <- resTrim.NULL[which(resTrim.NULL$p == "800"),]
resNone.p800 <- resNone.Null[which(resNone.NULL$p == "800")]
resNone.p800 <- resNone.NULL[which(resNone.NULL$p == "800")]
resNone.p800 <- resNone.NULL[which(resNone.NULL$p == "800"),]
View(resNone.p800)
resNone.p800
resTrim.p800
hist(resTrim.p800$MSE)
hist(sqrt(resTrim.p800$MSE))
hist(resTrim.p800$MSE)
hist(resNone.p800$MSE)
hist(resTrim.p800$MSE, xlim = c(0, 13))
hist(res.None.p800$MSE, add = TRUE)
hist(resNone.p800$MSE, add = TRUE)
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = 10)
hist(resNone.p800$MSE, breaks = 10, add = TRUE)
?hist
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = 100)
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = 20)
hist(resNone.p800$MSE, breaks = 20, add = TRUE)
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = 0:13)
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = seq(0, 13, 0.25))
hist(resNone.p800$MSE, breaks = 20, add = TRUE, breaks = seq(0, 13, 0.25))
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 13, 0.25))
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = seq(0, 13, 0.25), col = rgb(0,9, 1, 0.5))
?rgb
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = seq(0, 13, 0.25), col = rgb(0,0, 1,1, 0.5))
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = seq(0, 13, 0.25), col = rgb(0,0, 1,1, 0.1))
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = seq(0, 13, 0.25), col = rgb(0,0, 1,0.5))
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 13, 0.25), col = rgb(0,0, 1,0.2))
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = seq(0, 13, 0.25), col = rgb(0,0, 1,0.2))
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 13, 0.25), col = rgb(0,0, 1,0.2))
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 13, 0.25), col = rgb(1,0, 1,0.2))
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 13, 0.25), col = rgb(1,0, 0,0.2))
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = seq(0, 13, 0.25), col = rgb(0,0, 1,0.2))
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 13, 0.25), col = rgb(1,0, 0,0.2))
par(mfrow = c(1,1))
par(mfrow = c(1,2))
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = seq(0, 13, 0.25), col = rgb(0,0, 1,0.2))
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 13, 0.25), col = rgb(1,0, 0,0.2))
hist(resTrim.p800$MSE, xlim = c(0, 13), breaks = seq(0, 13, 0.25), col = rgb(0,0, 1,0.2), xlab = "MSE")
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 13, 0.25), col = rgb(1,0, 0,0.2))
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 12.5, 0.25), col = rgb(1,0, 0,0.2))
par(mfrow = c(1,2))
hist(resTrim.p800$MSE, xlim = c(0, 12.5), breaks = seq(0, 12.5, 0.25), col = rgb(0,0, 1,0.2), xlab = "MSE")
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 12.5, 0.25), col = rgb(1,0, 0,0.2))
par(mfrow = c(1,2))
hist(resTrim.p800$MSE, xlim = c(0, 12.5), breaks = seq(0, 12.5, 0.25),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Prediction error of f")
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 12.5, 0.25), col = rgb(1,0, 0,0.2))
hist(resTrim.p800$active, xlim = c(0, 150), breaks = seq(0, 150, 5),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Prediction error of f")
hist(resTrim.p800$s.active, xlim = c(0, 150), breaks = seq(0, 150, 5),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Prediction error of f")
hist(resNone.p800$s.active, add = TRUE, breaks = seq(0, 150, 5), col = rgb(1,0, 0,0.2))
hist(resTrim.p800$s.active, xlim = c(0, 150), ylim = c(0, 20), breaks = seq(0, 150, 5),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Prediction error of f")
hist(resNone.p800$s.active, add = TRUE, breaks = seq(0, 150, 5), col = rgb(1,0, 0,0.2))
par(mfrow = c(1,2))
hist(resTrim.p800$MSE, xlim = c(0, 12.5), breaks = seq(0, 12.5, 0.25),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Prediction error of f")
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 12.5, 0.25), col = rgb(1,0, 0,0.2))
hist(resTrim.p800$s.active, xlim = c(0, 150), ylim = c(0, 20), breaks = seq(0, 150, 5),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Prediction error of f")
hist(resNone.p800$s.active, add = TRUE, breaks = seq(0, 150, 5), col = rgb(1,0, 0,0.2))
legend("topright", legend=c("trim","naive"), col=c(rgb(0,0,1,0.2),
rgb(1,0,0,0.2)), pt.cex=2, pch=15 )
legend("topright", legend=c("trim","naive"), col=c(rgb(0,0,1,0.2),
rgb(1,0,0,0.2)), pt.cex=2, pch=15 )
par(mfrow = c(1,2))
hist(resTrim.p800$MSE, xlim = c(0, 12.5), breaks = seq(0, 12.5, 0.25),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Prediction error of f")
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 12.5, 0.25), col = rgb(1,0, 0,0.2))
legend("topright", legend=c("trim","naive"), col=c(rgb(0,0,1,0.2),
rgb(1,0,0,0.2)), pt.cex=2, pch=15 )
hist(resTrim.p800$s.active, xlim = c(0, 150), ylim = c(0, 20), breaks = seq(0, 150, 5),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Size of estimated active set")
hist(resNone.p800$s.active, add = TRUE, breaks = seq(0, 150, 5), col = rgb(1,0, 0,0.2))
legend("topright", legend=c("trim","naive"), col=c(rgb(0,0,1,0.2),
rgb(1,0,0,0.2)), pt.cex=2, pch=15 )
par(mfrow = c(1,2))
hist(resTrim.p800$MSE, xlim = c(0, 12.5), breaks = seq(0, 12.5, 0.25),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Prediction error of f")
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 12.5, 0.25), col = rgb(1,0, 0,0.2))
legend("topright", legend=c("trim","naive"), col=c(rgb(0,0,1,0.2),
rgb(1,0,0,0.2)), pt.cex=2, pch=15 )
hist(resTrim.p800$s.active, xlim = c(0, 145), ylim = c(0, 20), breaks = seq(0, 150, 5),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Size of estimated active set")
hist(resNone.p800$s.active, add = TRUE, breaks = seq(0, 150, 5), col = rgb(1,0, 0,0.2))
hist(resTrim.p800$s.active, xlim = c(0, 145), ylim = c(0, 20), breaks = seq(0, 145, 5),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Size of estimated active set")
hist(resNone.p800$s.active, add = TRUE, breaks = seq(0, 150, 5), col = rgb(1,0, 0,0.2))
legend("topright", legend=c("trim","naive"), col=c(rgb(0,0,1,0.2),
rgb(1,0,0,0.2)), pt.cex=2, pch=15 )
resTrim.p800 <- resTrim.NULL[which(resTrim.NULL$p == "800"),]
resNone.p800 <- resNone.NULL[which(resNone.NULL$p == "800"),]
par(mfrow = c(1,2))
hist(resTrim.p800$MSE, xlim = c(0, 12.5), breaks = seq(0, 12.5, 0.25),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Prediction error of f")
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 12.5, 0.25), col = rgb(1,0, 0,0.2))
legend("topright", legend=c("trim","naive"), col=c(rgb(0,0,1,0.2),
rgb(1,0,0,0.2)), pt.cex=2, pch=15 )
hist(resTrim.p800$s.active, xlim = c(0, 145), ylim = c(0, 20), breaks = seq(0, 145, 5),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Size of estimated active set")
hist(resNone.p800$s.active, add = TRUE, breaks = seq(0, 145, 5), col = rgb(1,0, 0,0.2))
legend("topright", legend=c("trim","naive"), col=c(rgb(0,0,1,0.2),
rgb(1,0,0,0.2)), pt.cex=2, pch=15 )
par(mfrow = c(1,2))
hist(resTrim.p800$MSE, xlim = c(0, 12.5), breaks = seq(0, 12.5, 0.25),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Prediction error of f")
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 12.5, 0.25), col = rgb(1,0, 0,0.2))
legend("topright", legend=c("trim","naive"), col=c(rgb(0,0,1,0.2),
rgb(1,0,0,0.2)), pt.cex=2, pch=15 )
hist(resTrim.p800$s.active, xlim = c(0, 145), ylim = c(0, 18), breaks = seq(0, 145, 5),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Size of estimated active set")
hist(resNone.p800$s.active, add = TRUE, breaks = seq(0, 145, 5), col = rgb(1,0, 0,0.2))
legend("topright", legend=c("trim","naive"), col=c(rgb(0,0,1,0.2),
rgb(1,0,0,0.2)), pt.cex=2, pch=15 )
par(mfrow = c(1,2))
hist(resTrim.p800$MSE, xlim = c(0, 12.5), breaks = seq(0, 12.5, 0.25),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Prediction error of f")
hist(resNone.p800$MSE, add = TRUE, breaks = seq(0, 12.5, 0.25), col = rgb(1,0, 0,0.2))
legend("topright", legend=c("trim","naive"), col=c(rgb(0,0,1,0.2),
rgb(1,0,0,0.2)), pt.cex=2, pch=15 )
hist(resTrim.p800$s.active, xlim = c(0, 145), ylim = c(0, 18), breaks = seq(0, 145, 5),
col = rgb(0,0, 1,0.2), xlab = "MSE", main = "Size of estimated active set")
hist(resNone.p800$s.active, add = TRUE, breaks = seq(0, 145, 5), col = rgb(1,0, 0,0.2))
legend("topright", legend=c("trim","naive"), col=c(rgb(0,0,1,0.2),
rgb(1,0,0,0.2)), pt.cex=2, pch=15 )
source("Imports.R")
load("MotifData/fornicolai.RData")
#Data as in DLL-Real-Data.R, i.e. y=genes[, 131].
# data
t = 131
y = genes[,t]
X = motifs
par(mfrow=c(1,1))
svdX.d <- svd(X)$d
plot(svdX.d)
# Very large first eigenvalue. But Data not centered.
Xmeans <- colMeans(X)
Xc <- X-outer(rep(1, length(y)), Xmeans)
svdX.c <- svd(Xc)$d
plot(svdX.c, main = "Singular values of (centered) motif data", ylab="singular value d_l", xlab = "l")
load("MotifEvaluation_2023_10_13.RData")
length(fit.null$active)
length(fit.trim$active)
lengthsq <- function(v){sum(v^2)}
coeflength.null <- as.numeric(lapply(fit.null$coefs, lengthsq))
coeflength.trim <- as.numeric(lapply(fit.trim$coefs, lengthsq))
par(mfrow=c(2,1))
plot(coeflength.null, ylim = c(0, 10), main = "Length of coefficient vector without transformation", xlab = "j", ylab = "length squared")
plot(coeflength.trim, ylim = c(0,10), main = "Length of coefficient vector witwith trim transformation", xlab = "j", ylab = "length squared")
par(mfrow=c(1,1))
plot(coeflength.null, coeflength.trim)
abline(0,1)
ord <- order(coeflength.trim)
ind <- tail(ord, n=9)
par(mfrow = c(3,3))
for (l in 1:9){
j <- ind[10-l]
xx <- seq(min(X[,j]), max(X[,j]), length.out=50)
fhatj.trim <- estimate.fj(xx, j, fit.trim)
plot(xx, fhatj.trim, type = "l", col = "blue", xlim=c(min(xx),max(xx)), xlab = "X_j", ylab = "f_j(X_j)", main = paste("j=", j), ylim = c(-0.5, 2.5))
fhatj.null <- estimate.fj(xx, j, fit.null)
lines(xx, fhatj.null, type = "l", col = "red", ylim=c(min(xx),max(xx)), xlab = "X_j", ylab = "f_j(X_j)", main = paste("j=", j))
legend("topleft", legend = c("trim transformation", "no transformation"), col = c("blue", "red"), lwd = 1)
abline(h=0, col="grey")
points(X[,j], rep(-0.5, length(X[, j])), pch = 16, cex= 1, col=rgb(0,0,0, 0.1))
}
fhat.null <- estimate.function(X, fit.null)
fhat.trim <- estimate.function(X, fit.trim)
mean(fhat.null^2)
mean(fhat.trim^2)
mean(fhat.null^2)/mean(fhat.trim^2)
par(mfrow=c(1,1))
plot(fhat.null, fhat.trim)
fit <- lm(fhat.trim~fhat.null)
summary(fit)
abline(fit, col = "red")
coeflength.trim
coeflength.null
ord <- order(coeflength.null)
# active set of "none" minus active set of "trim"
active.diff <- setdiff(fit.null$active, fit.trim$active)
foo <- function(j){return(j %in% active.diff)}
in.diff <- sapply(ord, foo)
in.diff
ord[in.diff]
coeflength.null[1]
int.ind <- tail(ord[in.diff], 9)
par(mfrow = c(3,3))
for (l in 1:9){
j <- int.ind[10-l]
xx <- seq(min(X[,j]), max(X[,j]), length.out=50)
fhatj.trim <- estimate.fj(xx, j, fit.trim)
plot(xx, fhatj.trim, type = "l", col = "blue", xlim=c(min(xx),max(xx)), xlab = "X_j", ylab = "f_j(X_j)", main = paste("j=", j), ylim = c(-0.5, 2.5))
fhatj.null <- estimate.fj(xx, j, fit.null)
lines(xx, fhatj.null, type = "l", col = "red", ylim=c(min(xx),max(xx)), xlab = "X_j", ylab = "f_j(X_j)", main = paste("j=", j))
legend("topleft", legend = c("trim transformation", "no transformation"), col = c("blue", "red"), lwd = 1)
abline(h=0, col="grey")
points(X[,j], rep(-0.5, length(X[, j])), pch = 16, cex= 1, col=rgb(0,0,0, 0.1))
}
ord <- order(coeflength.null)
# active set of "none" minus active set of "trim"
active.diff <- setdiff(fit.null$active, fit.trim$active)
foo <- function(j){return(j %in% active.diff)}
in.diff <- sapply(ord, foo)
in.diff
ord[in.diff]
coeflength.null[1]
int.ind <- tail(ord[in.diff], 9)
par(mfrow = c(3,3))
for (l in 1:9){
j <- int.ind[10-l]
xx <- seq(min(X[,j]), max(X[,j]), length.out=50)
fhatj.trim <- estimate.fj(xx, j, fit.trim)
plot(xx, fhatj.trim, type = "l", col = "blue", xlim=c(min(xx),max(xx)), xlab = "X_j", ylab = "f_j(X_j)", main = paste("j=", j), ylim = c(-0.5, 2.5))
fhatj.null <- estimate.fj(xx, j, fit.null)
lines(xx, fhatj.null, type = "l", col = "red", ylim=c(min(xx),max(xx)), xlab = "X_j", ylab = "f_j(X_j)", main = paste("j=", j))
legend("topleft", legend = c("trim transformation", "no transformation"), col = c("blue", "red"), lwd = 1)
abline(h=0, col="grey")
points(X[,j], rep(-0.5, length(X[, j])), pch = 16, cex= 1, col=rgb(0,0,0, 0.1))
}
# are the 92 variables selected by trim more or less the 92 strongest variable for the naive method?
top92.null <- head(ord, 92)
intersect(fit.trim$active, top92.null)
top92.null
fit.trim$active
intersect(fit.trim$active, top92.null)
?intersect
ord
?order
# are the 92 variables selected by trim more or less the 92 strongest variable for the naive method?
top92.null <- head(order(coeflength.null, decreasing = TRUE), 92)
intersect(fit.trim$active, top92.null)
length(intersect(fit.trim$active, top92.null))
top92.null <- head(order(coeflength.null, decreasing = TRUE), 92)
length(intersect(fit.trim$active, top92.null))
size(Xc)
dim(Xc)
# for l = 1,..., 211, record the size of the intersection of the strongest l variables for trim and the strongest l variables for none
ord.null <- order(coeflength.null, decreasing = TRUE)
# for l = 1,..., 211, record the size of the intersection of the strongest l variables for trim and the strongest l variables for none
ord.null <- order(coeflength.null, decreasing = TRUE)
ord.trim <- order(coeflength.trim, decreasing = TRUE)
ord.null
ord.trim
for(l in 1:211){
size.intersect[l] <- length(intersect(head(ord.null, l), head(ord.trim, l)))
}
# for l = 1,..., 211, record the size of the intersection of the strongest l variables for trim and the strongest l variables for none
ord.null <- order(coeflength.null, decreasing = TRUE)
ord.trim <- order(coeflength.trim, decreasing = TRUE)
size.intersect <- numeric(211)
for(l in 1:211){
size.intersect[l] <- length(intersect(head(ord.null, l), head(ord.trim, l)))
}
plot(size.intersect)
par(mfrow = c(1,2))
for(l in 1:211){
size.intersect[l] <- length(intersect(head(ord.null, l), head(ord.trim, l)))
}
par(mfrow = c(1,1))
for(l in 1:211){
size.intersect[l] <- length(intersect(head(ord.null, l), head(ord.trim, l)))
}
plot(size.intersect)
# for l = 1,..., 211, record the size of the intersection of the strongest l variables for trim and the strongest l variables for none
ord.null <- order(coeflength.null, decreasing = TRUE)[1:211]
ord.trim <- order(coeflength.trim, decreasing = TRUE)[1:92]
size.intersect <- numeric(211)
par(mfrow = c(1,1))
for(l in 1:211){
size.intersect[l] <- length(intersect(head(ord.null, l), head(ord.trim, l)))
}
plot(size.intersect)
abline(0,1)
plot(size.intersect/1:211)
plot(size.intersect/1:211, type = "l")
# coefficient length of trim vs naive
par(mfrow=c(1,1))
plot(coeflength.null, coeflength.trim)
abline(0,1)
# coefficient length of trim vs naive
par(mfrow=c(1,1))
plot(sqrt(coeflength.null), sqrt(coeflength.trim))
abline(0,1)
# coefficient length of trim vs naive
par(mfrow=c(1,1))
plot(sqrt(coeflength.null), sqrt(coeflength.trim), main = "Norm of coefficient vectors", xlab = "no transformation", ylab = "trim transformation")
abline(0,1)
# for l = 1,..., 211, record the size of the intersection of the strongest l variables for trim and the strongest l variables for none
ord.null <- order(coeflength.null, decreasing = TRUE)[1:211]
ord.trim <- order(coeflength.trim, decreasing = TRUE)[1:92]
size.intersect <- numeric(211)
par(mfrow = c(1,1))
for(l in 1:211){
size.intersect[l] <- length(intersect(head(ord.null, l), head(ord.trim, l)))
}
plot(size.intersect)
plot(size.intersect/1:211, xlab = "l", ylab = "size of intersection", main = "Size of intersection of top l"
plot(size.intersect/1:211, type = "l")
plot(size.intersect/1:211, xlab = "l", ylab = "size of intersection", main = "Size of intersection of top l")
?intersect
par(mfrow = c(1,1))
for(l in 1:211){
size.intersect[l] <- length(intersect(head(ord.null, l), head(ord.trim, l)))
size.union[l] <- length(union(head(ord.null, l), head(ord.trim, l)))
}
size.intersect <- numeric(211)
size.union <- numeric(211)
par(mfrow = c(1,1))
jaccard <- size.intersect/size.union
plot(jaccard)
jaccard
size.union
union(head(ord.null, l), head(ord.trim, l)
))
union(head(ord.null, l), head(ord.trim, l))
l <- 55
union(head(ord.null, l), head(ord.trim, l))
size.intersect <- numeric(211)
size.union <- numeric(211)
par(mfrow = c(1,1))
for(l in 1:211){
size.intersect[l] <- length(intersect(head(ord.null, l), head(ord.trim, l)))
size.union[l] <- length(union(head(ord.null, l), head(ord.trim, l)))
}
jaccard <- size.intersect/size.union
jaccard
jaccard <- (size.union-size.intersect)/size.union
jaccard
plot(jaccard)
jaccard.dis <- (size.union-size.intersect)/size.union
jaccard.sim <- size.intersect/size.union
plot(jaccard.sim)
plot(jaccard.sim, type = "l")
# coefficient length of trim vs naive
par(mfrow=c(1,1))
plot(sqrt(coeflength.null), sqrt(coeflength.trim), main = "Norm of coefficient vectors", xlab = "no transformation", ylab = "trim transformation")
abline(0,1)
# both plots in one
par(mfrow = c(1,2))
# both plots in one
par(mfrow = c(1,2))
plot(sqrt(coeflength.null), sqrt(coeflength.trim), main = "Norm of coefficient vectors", xlab = "no transformation", ylab = "trim transformation")
abline(0,1)
plot(jaccard.sim, main = "Jaccard similarity of top l index sets", xlab = "l", ylab = "Jaccard similarity")
# both plots in one
par(mfrow = c(1,2))
plot(sqrt(coeflength.null), sqrt(coeflength.trim), main = "Norm of coefficient vectors", xlab = "no transformation", ylab = "trim transformation")
abline(0,1)
plot(jaccard.sim, main = "Jaccard similarity of top l index sets", type = "l", xlab = "l", ylab = "Jaccard similarity")
# both plots in one
par(mfrow = c(1,2))
plot(sqrt(coeflength.null), sqrt(coeflength.trim), main = "Norm of coefficient vectors", xlab = "no transformation", ylab = "trim transformation")
abline(0,1)
plot(jaccard.sim, main = "Jaccard similarity of top l index sets", type = "l", xlab = "l", ylab = "Jaccard similarity")
# both plots in one
par(mfrow = c(1,2))
plot(sqrt(coeflength.null), sqrt(coeflength.trim), main = "Norm of coefficient vectors", xlab = "no transformation", ylab = "trim transformation")
abline(0,1)
plot(jaccard.sim, main = "Jaccard similarity of top l index sets", type = "l", xlab = "l", ylab = "Jaccard similarity")
apply(Xc, 2, max)
max(Xc)
max(X)
